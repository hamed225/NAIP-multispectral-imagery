# -*- coding: utf-8 -*-
"""ndvifromnaipag.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Klmwn5jQt8bbIle1f-4n3NR47I5l-bgl
"""

!pip install rasterio
!pip install geopandas

import numpy as np
import os
import matplotlib as mpl
import matplotlib.pyplot as plt
import rasterio as rio
import geopandas as gpd

#from your local file

from google.colab import files
uploaded = files.upload()

#import data from google drive
#mount google drive, give colab access

from google.colab import drive
drive.mount('/content/gdrive')

#Check GDrive access:

!ls "/content/gdrive/My Drive/Colab Notebooks"

#Unzip (q - quite!) file from GDrive:
#dataset=m_4108423_ne_16_1_20170718

!unzip -q "/content/gdrive/My Drive/Colab Notebooks/Lenawee_MI/m_4108423_ne_16_1_20170718.ZIP"

#checking if the file is there

!ls "m_4108423_ne_16_1_20170718.tif"

#open raster (.tif) file

with rio.open("m_4108423_ne_16_1_20170718.tif") as ras:
    naip_raster1 = ras.read()
    #naip_raster1 = ras.meta()

#view shape of the data

naip_raster1.shape

#visualize actual raster downloaded from naip

from rasterio.plot import show
fig= plt.subplots(figsize=(20,10))
show(naip_raster1)

#plot histogram of raster data

from rasterio.plot import show_hist

fig= plt.subplots(figsize=(10,5))
show_hist(naip_raster1, bins=50, lw=1.0, stacked=False, alpha=0.3,
   histtype='stepfilled', title="Histogram")

#red band

r=naip_raster1[0]
fig, ax = plt.subplots(figsize=(20,10))
fig=plt.imshow(r)
fig.set_cmap('Reds')
plt.colorbar()
plt.show()

#nir band

nir=naip_raster1[3]
fig, ax = plt.subplots(figsize=(20,10))
fig=plt.imshow(nir)
fig.set_cmap('Greens')
plt.colorbar()
plt.show()

#NDVI calculation: (nir-r)/(nir+r)
ndvi_naip_lmi = (naip_raster1[3] - naip_raster1[0]) / (naip_raster1[3] + naip_raster1[0])

# Plot NDVI map
fig, ax = plt.subplots(figsize=(20,10))
ndvi_map = ax.imshow(ndvi_naip_lmi, cmap='RdYlGn',vmin=-1, vmax=1)
fig.colorbar(ndvi_map, fraction=.05)
ax.set(title="NDVI for NW Michigan")
ax.set_axis_off()
plt.show()